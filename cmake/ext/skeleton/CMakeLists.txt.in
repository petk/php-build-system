#[=============================================================================[
# The %EXTNAME% extension

Configure the `%EXTNAME%` extension.

## PHP_EXT_%EXTNAMECAPS%

* Default: `OFF`
* Values: `ON|OFF`

Enable the extension.

## PHP_EXT_%EXTNAMECAPS%_SHARED

* Default: `OFF`
* Values: `ON|OFF`

Build extension as shared.
#]=============================================================================]

# CMakeLists.txt file for the %EXTNAME% extension.

# Set minimum required CMake version.
cmake_minimum_required(VERSION 3.25...3.31)

# Add paths where include() and find_package() look for modules.
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake/modules)

# Automatically include current source or build tree for the current target.
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Put the source or build tree include directories before other includes.
set(CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE ON)

# Define the PHP extension project and its metadata.
project(
  php_ext_%EXTNAME%
  VERSION 0.1.0
  DESCRIPTION "Describe the extension"
  HOMEPAGE_URL "https://example.org"
  LANGUAGES C
)

# Include CMake module to use cmake_dependent_option().
include(CMakeDependentOption)

# Include CMake module to use add_feature_info() and set_package_properties().
include(FeatureSummary)

# Define GNU standard installation directories.
include(GNUInstallDirs)

# Boolean option that enables (ON) or disables (OFF) the extension. For example,
# cmake -B <build-dir> -D PHP_EXT_%EXTNAMECAPS%=ON
option(PHP_EXT_%EXTNAMECAPS% "Enable the %EXTNAME% extension" ${PROJECT_IS_TOP_LEVEL})

# Extension features are visible in the configuration summary output.
add_feature_info(
  "ext/%EXTNAME%"
  PHP_EXT_%EXTNAMECAPS%
  "short description of extension features"
)

# Dependent boolean option that builds extension as a shared library. CMake's
# BUILD_SHARED_LIBS variable hides this option and builds extension as shared.
cmake_dependent_option(
  PHP_EXT_%EXTNAMECAPS%_SHARED
  "Build the %EXTNAME% extension as a shared library"
  ${PROJECT_IS_TOP_LEVEL}
  "PHP_EXT_%EXTNAMECAPS%;NOT BUILD_SHARED_LIBS"
  OFF
)

# If extension is disabled CMake configuration stops here.
if(NOT PHP_EXT_%EXTNAMECAPS%)
  return()
endif()

# Add a target to be built as a SHARED or STATIC library.
if(PHP_EXT_%EXTNAMECAPS%_SHARED)
  add_library(php_ext_%EXTNAME% SHARED)
else()
  add_library(php_ext_%EXTNAME%)
endif()

# Configure extension as CLI-based. Such extensions are only meant to be used
# and enabled on CLI-based PHP SAPIs, such as cgi, cli, phpdbg, embed, etc.
#set_target_properties(php_ext_%EXTNAME% PROPERTIES PHP_CLI TRUE)

# Configure extension as Zend extension. Zend extensions are loaded with the
# 'zend_extension' INI directive and include additional advanced hooks. Use only
# when building advanced extensions, such as debuggers, profilers, caching, etc.
#set_target_properties(php_ext_%EXTNAME% PROPERTIES PHP_ZEND_EXTENSION TRUE)

# Add library target sources.
target_sources(
  php_ext_%EXTNAME%
  PRIVATE
    %EXTNAME%.c
    %EXTNAME%.stub.php
  # Add headers to a file set, if extension provides headers that should be
  # installed and will be consumed by other sources.
  PUBLIC
    FILE_SET HEADERS
      FILES
        php_%EXTNAME%.h
)

# Add compile definitions.
target_compile_definitions(
  php_ext_%EXTNAME%
  PRIVATE
    # Enable "Thread Safety Resource Manager Local Storage" static cache.
    ZEND_ENABLE_STATIC_TSRMLS_CACHE
)

# Find PHP on the system.
find_package(PHP REQUIRED COMPONENTS Development)

# Link the PHP::Development imported library which provides the PHP include
# directories and configuration for the extension.
target_link_libraries(php_ext_%EXTNAME% PRIVATE PHP::Development)

# Install files to system destinations when running 'cmake --install'.
install(
  TARGETS php_ext_%EXTNAME%
  ARCHIVE EXCLUDE_FROM_ALL
  FILE_SET HEADERS
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PHP_INCLUDE_PREFIX}/ext/%EXTNAME%
)

set(PHP_EXTENSION_%EXTNAMECAPS% TRUE)

# Create configuration header.
configure_file(cmake/config.h.in config.h)

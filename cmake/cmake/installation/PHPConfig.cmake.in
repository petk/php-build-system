if(CMAKE_VERSION VERSION_LESS 3.25)
  set(
    ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
    "PHP ${${CMAKE_FIND_PACKAGE_NAME}_VERSION} requires CMake 3.25 or later."
  )
  set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
  return()
endif()

cmake_minimum_required(VERSION 3.25...3.31)

# Set PHP components.
if(${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
  set(
    ${CMAKE_FIND_PACKAGE_NAME}_components
    ${${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS}
  )
else()
  # No components given, look for default components.
  set(${CMAKE_FIND_PACKAGE_NAME}_components Interpreter)
endif()

# Ensure all required components are available before trying to load any.
foreach(component IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_components)
  if(
    ${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED_${component}
    AND NOT EXISTS ${CMAKE_CURRENT_LIST_DIR}/PHP_${component}.cmake
  )
    set(
      ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
      "PHP doesn't have the required component installed: ${component}"
    )
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)

    return()
  endif()
endforeach()

foreach(component IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_components)
  # All required components are known to exist. The OPTIONAL keyword allows the
  # non-required components to be missing without error.
  include(${CMAKE_CURRENT_LIST_DIR}/PHP_${component}.cmake OPTIONAL)
endforeach()

@PACKAGE_INIT@

set_and_check(PHP_INCLUDE_DIR "@PACKAGE_INSTALL_INCLUDE_DIR@")

check_required_components(${CMAKE_FIND_PACKAGE_NAME})

Subject: Replace old/deprecated pspell interface with aspell

The Pspell library [1] was superseded by GNU Aspell library [2] and
Pspell was integrated into it. The GNU Aspell library includes a simple
interface for the old pspell library due to backwards compatibility
(pspell.h) [3] which only defines old pspell_ symbol as aspell_ ones.
Instead of using the old pspell symbol names, this patch uses the
current Aspell.

The libpspell-dev on some *nix systems is part of the GNU Aspell. So the
libaspell-dev is automatically installed when installing libpspell-dev.
Meaning, the requirements will work also for build systems where
libpspell-dev is installed, however the libaspell-dev should be
encouraged to be used instead.

Additionally:
- Unused custom constant PSPELL_LARGEST_WORD is removed.

See: https://github.com/php/php-src/pull/12017

[1]: https://sourceforge.net/projects/pspell/
[2]: http://aspell.net/
[3]: https://github.com/GNUAspell/aspell/blob/e8eb747/interfaces/cc/pspell.h
---
 .github/actions/apt-x32/action.yml |   1 -
 .github/actions/apt-x64/action.yml |   1 -
 .travis.yml                        |   1 -
 ext/pspell/config.m4               |  13 +-
 ext/pspell/config.w32              |   4 +-
 ext/pspell/pspell.c                | 223 ++++++++++++++---------------
 6 files changed, 114 insertions(+), 129 deletions(-)

diff --git a/.github/actions/apt-x32/action.yml b/.github/actions/apt-x32/action.yml
index 879300f992..de820684fb 100644
--- a/.github/actions/apt-x32/action.yml
+++ b/.github/actions/apt-x32/action.yml
@@ -31,7 +31,6 @@ runs:
           libonig-dev:i386 \
           libpng-dev:i386 \
           libpq-dev:i386 \
-          libpspell-dev:i386 \
           libreadline-dev:i386 \
           libsasl2-dev:i386 \
           libsodium-dev:i386 \
diff --git a/.github/actions/apt-x64/action.yml b/.github/actions/apt-x64/action.yml
index bc2aa00df2..739abf8fe5 100644
--- a/.github/actions/apt-x64/action.yml
+++ b/.github/actions/apt-x64/action.yml
@@ -34,7 +34,6 @@ runs:
           libenchant-2-dev \
           libaspell-dev \
           libbz2-dev \
-          libpspell-dev \
           libsasl2-dev \
           libxpm-dev \
           libzip-dev \
diff --git a/.travis.yml b/.travis.yml
index 817bef0003..39e4991e2f 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -24,7 +24,6 @@ addons:
       - libonig-dev
       - libpng-dev
       - libpq-dev
-      - libpspell-dev
       - libsasl2-dev
       - libsqlite3-dev
       - libsodium-dev
diff --git a/ext/pspell/config.m4 b/ext/pspell/config.m4
index db49b4fd86..2356ad7d51 100644
--- a/ext/pspell/config.m4
+++ b/ext/pspell/config.m4
@@ -1,7 +1,7 @@
 PHP_ARG_WITH([pspell],
-  [for PSPELL support],
+  [for spell checker support],
   [AS_HELP_STRING([[--with-pspell[=DIR]]],
-    [Include PSPELL support. GNU Aspell version 0.50.0 or higher required])])
+    [Include Aspell support. GNU Aspell version 0.50.0 or higher required])])
 
 if test "$PHP_PSPELL" != "no"; then
 	dnl Add -Wno-strict-prototypes as depends on user libs
@@ -12,22 +12,19 @@ if test "$PHP_PSPELL" != "no"; then
 	    PSPELL_SEARCH_DIRS="/usr/local /usr"
 	fi
 	for i in $PSPELL_SEARCH_DIRS; do
-		if test -f $i/include/pspell/pspell.h; then
-			PSPELL_DIR=$i
-			PSPELL_INCDIR=$i/include/pspell
-		elif test -f $i/include/pspell.h; then
+		if test -f $i/include/aspell.h; then
 			PSPELL_DIR=$i
 			PSPELL_INCDIR=$i/include
 		fi
 	done
 
 	if test -z "$PSPELL_DIR"; then
-		AC_MSG_ERROR(Cannot find pspell)
+		AC_MSG_ERROR(Cannot find aspell library)
 	fi
 
 	PSPELL_LIBDIR=$PSPELL_DIR/$PHP_LIBDIR
 
-	PHP_ADD_LIBRARY_WITH_PATH(pspell, $PSPELL_LIBDIR, PSPELL_SHARED_LIBADD)
+	PHP_ADD_LIBRARY_WITH_PATH(aspell, $PSPELL_LIBDIR, PSPELL_SHARED_LIBADD)
 
 	dnl Add -laspell to LIBS if it exists
 	PHP_CHECK_LIBRARY(aspell,new_aspell_config,
diff --git a/ext/pspell/config.w32 b/ext/pspell/config.w32
index d88ea1d30c..83a8413846 100644
--- a/ext/pspell/config.w32
+++ b/ext/pspell/config.w32
@@ -1,10 +1,10 @@
 // vim:ft=javascript
 
-ARG_WITH("pspell", "pspell/aspell (whatever it's called this month) support", "no");
+ARG_WITH("pspell", "Aspell support", "no");
 
 if (PHP_PSPELL != "no") {
 
-	if (CHECK_HEADER_ADD_INCLUDE("pspell.h", "CFLAGS_PSPELL", PHP_PHP_BUILD + "\\include\\pspell;" + PHP_PSPELL) &&
+	if (CHECK_HEADER_ADD_INCLUDE("aspell.h", "CFLAGS_PSPELL", PHP_PHP_BUILD + "\\include;" + PHP_PSPELL) &&
 			CHECK_LIB("aspell*.lib", "pspell", PHP_PSPELL)) {
 		EXTENSION('pspell', 'pspell.c');
 		AC_DEFINE('HAVE_PSPELL', 1);
diff --git a/ext/pspell/pspell.c b/ext/pspell/pspell.c
index 7c15472ed0..6937dc7752 100644
--- a/ext/pspell/pspell.c
+++ b/ext/pspell/pspell.c
@@ -25,12 +25,8 @@
 #include <stdio.h>
 
 #ifdef HAVE_PSPELL
-
-/* this will enforce compatibility in .12 version (broken after .11.2) */
-#define USE_ORIGINAL_MANAGER_FUNCS
-
 #include "php_pspell.h"
-#include <pspell.h>
+#include <aspell.h>
 #include "ext/standard/info.h"
 
 #define PSPELL_FAST 1L
@@ -41,11 +37,6 @@
 
 #include "pspell_arginfo.h"
 
-/* Largest ignored word can be 999 characters (this seems sane enough),
- * and it takes 3 bytes to represent that (see pspell_config_ignore)
- */
-#define PSPELL_LARGEST_WORD 3
-
 static PHP_MINIT_FUNCTION(pspell);
 static PHP_MINFO_FUNCTION(pspell);
 
@@ -74,7 +65,7 @@ ZEND_GET_MODULE(pspell)
 /* class PSpell */
 
 typedef struct _php_pspell_object {
-	PspellManager *mgr;
+	AspellSpeller *mgr;
 	zend_object std;
 } php_pspell_object;
 
@@ -106,13 +97,13 @@ static zend_object *php_pspell_object_create(zend_class_entry *ce)
 }
 
 static void php_pspell_object_free(zend_object *zobj) {
-	delete_pspell_manager(php_pspell_object_from_zend_object(zobj)->mgr);
+	delete_aspell_speller(php_pspell_object_from_zend_object(zobj)->mgr);
 }
 
-/* class PSpellConfig */
+/* class PSpell\\Config */
 
 typedef struct _php_pspell_config_object {
-	PspellConfig *cfg;
+	AspellConfig *cfg;
 	zend_object std;
 } php_pspell_config_object;
 
@@ -144,7 +135,7 @@ static zend_object *php_pspell_config_object_create(zend_class_entry *ce)
 }
 
 static void php_pspell_config_object_free(zend_object *zobj) {
-	delete_pspell_config(php_pspell_config_object_from_zend_object(zobj)->cfg);
+	delete_aspell_config(php_pspell_config_object_from_zend_object(zobj)->cfg);
 }
 
 /* {{{ PHP_MINIT_FUNCTION */
@@ -190,15 +181,15 @@ PHP_FUNCTION(pspell_new)
 	DWORD dwType,dwLen;
 #endif
 
-	PspellCanHaveError *ret;
-	PspellConfig *config;
+	AspellCanHaveError *ret;
+	AspellConfig *config;
 
 	if (zend_parse_parameters(argc, "s|sssl", &language, &language_len, &spelling, &spelling_len,
 		&jargon, &jargon_len, &encoding, &encoding_len, &mode) == FAILURE) {
 		RETURN_THROWS();
 	}
 
-	config = new_pspell_config();
+	config = new_aspell_config();
 
 #ifdef PHP_WIN32
 	/* If aspell was installed using installer, we should have a key
@@ -215,24 +206,24 @@ PHP_FUNCTION(pspell_new)
 			strlcpy(dict_dir, aspell_dir, sizeof(dict_dir));
 			strlcat(dict_dir, "\\dict", sizeof(dict_dir));
 
-			pspell_config_replace(config, "data-dir", data_dir);
-			pspell_config_replace(config, "dict-dir", dict_dir);
+			aspell_config_replace(config, "data-dir", data_dir);
+			aspell_config_replace(config, "dict-dir", dict_dir);
 		}
 	}
 #endif
 
-	pspell_config_replace(config, "language-tag", language);
+	aspell_config_replace(config, "language-tag", language);
 
 	if (spelling_len) {
-		pspell_config_replace(config, "spelling", spelling);
+		aspell_config_replace(config, "spelling", spelling);
 	}
 
 	if (jargon_len) {
-		pspell_config_replace(config, "jargon", jargon);
+		aspell_config_replace(config, "jargon", jargon);
 	}
 
 	if (encoding_len) {
-		pspell_config_replace(config, "encoding", encoding);
+		aspell_config_replace(config, "encoding", encoding);
 	}
 
 	if (mode) {
@@ -240,30 +231,30 @@ PHP_FUNCTION(pspell_new)
 
 		/* First check what mode we want (how many suggestions) */
 		if (speed == PSPELL_FAST) {
-			pspell_config_replace(config, "sug-mode", "fast");
+			aspell_config_replace(config, "sug-mode", "fast");
 		} else if (speed == PSPELL_NORMAL) {
-			pspell_config_replace(config, "sug-mode", "normal");
+			aspell_config_replace(config, "sug-mode", "normal");
 		} else if (speed == PSPELL_BAD_SPELLERS) {
-			pspell_config_replace(config, "sug-mode", "bad-spellers");
+			aspell_config_replace(config, "sug-mode", "bad-spellers");
 		}
 
 		/* Then we see if run-together words should be treated as valid components */
 		if (mode & PSPELL_RUN_TOGETHER) {
-			pspell_config_replace(config, "run-together", "true");
+			aspell_config_replace(config, "run-together", "true");
 		}
 	}
 
-	ret = new_pspell_manager(config);
-	delete_pspell_config(config);
+	ret = new_aspell_speller(config);
+	delete_aspell_config(config);
 
-	if (pspell_error_number(ret) != 0) {
-		php_error_docref(NULL, E_WARNING, "PSPELL couldn't open the dictionary. reason: %s", pspell_error_message(ret));
-		delete_pspell_can_have_error(ret);
+	if (aspell_error_number(ret) != 0) {
+		php_error_docref(NULL, E_WARNING, "PSPELL couldn't open the dictionary. reason: %s", aspell_error_message(ret));
+		delete_aspell_can_have_error(ret);
 		RETURN_FALSE;
 	}
 
 	object_init_ex(return_value, php_pspell_ce);
-	php_pspell_object_from_zend_object(Z_OBJ_P(return_value))->mgr = to_pspell_manager(ret);
+	php_pspell_object_from_zend_object(Z_OBJ_P(return_value))->mgr = to_aspell_speller(ret);
 }
 /* }}} */
 
@@ -283,15 +274,15 @@ PHP_FUNCTION(pspell_new_personal)
 	DWORD dwType,dwLen;
 #endif
 
-	PspellCanHaveError *ret;
-	PspellConfig *config;
+	AspellCanHaveError *ret;
+	AspellConfig *config;
 
 	if (zend_parse_parameters(argc, "ps|sssl", &personal, &personal_len, &language, &language_len,
 		&spelling, &spelling_len, &jargon, &jargon_len, &encoding, &encoding_len, &mode) == FAILURE) {
 		RETURN_THROWS();
 	}
 
-	config = new_pspell_config();
+	config = new_aspell_config();
 
 #ifdef PHP_WIN32
 	/* If aspell was installed using installer, we should have a key
@@ -308,32 +299,32 @@ PHP_FUNCTION(pspell_new_personal)
 			strlcpy(dict_dir, aspell_dir, sizeof(dict_dir));
 			strlcat(dict_dir, "\\dict", sizeof(dict_dir));
 
-			pspell_config_replace(config, "data-dir", data_dir);
-			pspell_config_replace(config, "dict-dir", dict_dir);
+			aspell_config_replace(config, "data-dir", data_dir);
+			aspell_config_replace(config, "dict-dir", dict_dir);
 		}
 	}
 #endif
 
 	if (php_check_open_basedir(personal)) {
-		delete_pspell_config(config);
+		delete_aspell_config(config);
 		RETURN_FALSE;
 	}
 
-	pspell_config_replace(config, "personal", personal);
-	pspell_config_replace(config, "save-repl", "false");
+	aspell_config_replace(config, "personal", personal);
+	aspell_config_replace(config, "save-repl", "false");
 
-	pspell_config_replace(config, "language-tag", language);
+	aspell_config_replace(config, "language-tag", language);
 
 	if (spelling_len) {
-		pspell_config_replace(config, "spelling", spelling);
+		aspell_config_replace(config, "spelling", spelling);
 	}
 
 	if (jargon_len) {
-		pspell_config_replace(config, "jargon", jargon);
+		aspell_config_replace(config, "jargon", jargon);
 	}
 
 	if (encoding_len) {
-		pspell_config_replace(config, "encoding", encoding);
+		aspell_config_replace(config, "encoding", encoding);
 	}
 
 	if (mode) {
@@ -341,30 +332,30 @@ PHP_FUNCTION(pspell_new_personal)
 
 		/* First check what mode we want (how many suggestions) */
 		if (speed == PSPELL_FAST) {
-			pspell_config_replace(config, "sug-mode", "fast");
+			aspell_config_replace(config, "sug-mode", "fast");
 		} else if (speed == PSPELL_NORMAL) {
-			pspell_config_replace(config, "sug-mode", "normal");
+			aspell_config_replace(config, "sug-mode", "normal");
 		} else if (speed == PSPELL_BAD_SPELLERS) {
-			pspell_config_replace(config, "sug-mode", "bad-spellers");
+			aspell_config_replace(config, "sug-mode", "bad-spellers");
 		}
 
 		/* Then we see if run-together words should be treated as valid components */
 		if (mode & PSPELL_RUN_TOGETHER) {
-			pspell_config_replace(config, "run-together", "true");
+			aspell_config_replace(config, "run-together", "true");
 		}
 	}
 
-	ret = new_pspell_manager(config);
-	delete_pspell_config(config);
+	ret = new_aspell_speller(config);
+	delete_aspell_config(config);
 
-	if (pspell_error_number(ret) != 0) {
-		php_error_docref(NULL, E_WARNING, "PSPELL couldn't open the dictionary. reason: %s", pspell_error_message(ret));
-		delete_pspell_can_have_error(ret);
+	if (aspell_error_number(ret) != 0) {
+		php_error_docref(NULL, E_WARNING, "PSPELL couldn't open the dictionary. reason: %s", aspell_error_message(ret));
+		delete_aspell_can_have_error(ret);
 		RETURN_FALSE;
 	}
 
 	object_init_ex(return_value, php_pspell_ce);
-	php_pspell_object_from_zend_object(Z_OBJ_P(return_value))->mgr = to_pspell_manager(ret);
+	php_pspell_object_from_zend_object(Z_OBJ_P(return_value))->mgr = to_aspell_speller(ret);
 }
 /* }}} */
 
@@ -372,24 +363,24 @@ PHP_FUNCTION(pspell_new_personal)
 PHP_FUNCTION(pspell_new_config)
 {
 	zval *zcfg;
-	PspellCanHaveError *ret;
-	PspellConfig *config;
+	AspellCanHaveError *ret;
+	AspellConfig *config;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "O", &zcfg, php_pspell_config_ce) == FAILURE) {
 		RETURN_THROWS();
 	}
 	config = php_pspell_config_object_from_zend_object(Z_OBJ_P(zcfg))->cfg;
 
-	ret = new_pspell_manager(config);
+	ret = new_aspell_speller(config);
 
-	if (pspell_error_number(ret) != 0) {
-		php_error_docref(NULL, E_WARNING, "PSPELL couldn't open the dictionary. reason: %s", pspell_error_message(ret));
-		delete_pspell_can_have_error(ret);
+	if (aspell_error_number(ret) != 0) {
+		php_error_docref(NULL, E_WARNING, "PSPELL couldn't open the dictionary. reason: %s", aspell_error_message(ret));
+		delete_aspell_can_have_error(ret);
 		RETURN_FALSE;
 	}
 
 	object_init_ex(return_value, php_pspell_ce);
-	php_pspell_object_from_zend_object(Z_OBJ_P(return_value))->mgr = to_pspell_manager(ret);
+	php_pspell_object_from_zend_object(Z_OBJ_P(return_value))->mgr = to_aspell_speller(ret);
 }
 /* }}} */
 
@@ -398,14 +389,14 @@ PHP_FUNCTION(pspell_check)
 {
 	zval *zmgr;
 	zend_string *word;
-	PspellManager *manager;
+	AspellSpeller *manager;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "OS", &zmgr, php_pspell_ce, &word) == FAILURE) {
 		RETURN_THROWS();
 	}
 	manager = php_pspell_object_from_zend_object(Z_OBJ_P(zmgr))->mgr;
 
-	if (pspell_manager_check(manager, ZSTR_VAL(word))) {
+	if (aspell_speller_check(manager, ZSTR_VAL(word), ZSTR_LEN(word))) {
 		RETURN_TRUE;
 	} else {
 		RETURN_FALSE;
@@ -418,8 +409,8 @@ PHP_FUNCTION(pspell_suggest)
 {
 	zval *zmgr;
 	zend_string *word;
-	PspellManager *manager;
-	const PspellWordList *wl;
+	AspellSpeller *manager;
+	const AspellWordList *wl;
 	const char *sug;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "OS", &zmgr, php_pspell_ce, &word) == FAILURE) {
@@ -429,15 +420,15 @@ PHP_FUNCTION(pspell_suggest)
 
 	array_init(return_value);
 
-	wl = pspell_manager_suggest(manager, ZSTR_VAL(word));
+	wl = aspell_speller_suggest(manager, ZSTR_VAL(word), ZSTR_LEN(word));
 	if (wl) {
-		PspellStringEmulation *els = pspell_word_list_elements(wl);
-		while ((sug = pspell_string_emulation_next(els)) != 0) {
+		AspellStringEnumeration *els = aspell_word_list_elements(wl);
+		while ((sug = aspell_string_enumeration_next(els)) != 0) {
 			add_next_index_string(return_value,(char *)sug);
 		}
-		delete_pspell_string_emulation(els);
+		delete_aspell_string_enumeration(els);
 	} else {
-		php_error_docref(NULL, E_WARNING, "PSPELL had a problem. details: %s", pspell_manager_error_message(manager));
+		php_error_docref(NULL, E_WARNING, "PSPELL had a problem. details: %s", aspell_speller_error_message(manager));
 		RETURN_FALSE;
 	}
 }
@@ -448,18 +439,18 @@ PHP_FUNCTION(pspell_store_replacement)
 {
 	zval *zmgr;
 	zend_string *miss, *corr;
-	PspellManager *manager;
+	AspellSpeller *manager;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "OSS", &zmgr, php_pspell_ce, &miss, &corr) == FAILURE) {
 		RETURN_THROWS();
 	}
 	manager = php_pspell_object_from_zend_object(Z_OBJ_P(zmgr))->mgr;
 
-	pspell_manager_store_replacement(manager, ZSTR_VAL(miss), ZSTR_VAL(corr));
-	if (pspell_manager_error_number(manager) == 0) {
+	aspell_speller_store_replacement(manager, ZSTR_VAL(miss), ZSTR_LEN(miss), ZSTR_VAL(corr), ZSTR_LEN(corr));
+	if (aspell_speller_error_number(manager) == 0) {
 		RETURN_TRUE;
 	} else {
-		php_error_docref(NULL, E_WARNING, "pspell_store_replacement() gave error: %s", pspell_manager_error_message(manager));
+		php_error_docref(NULL, E_WARNING, "pspell_store_replacement() gave error: %s", aspell_speller_error_message(manager));
 		RETURN_FALSE;
 	}
 }
@@ -470,7 +461,7 @@ PHP_FUNCTION(pspell_add_to_personal)
 {
 	zval *zmgr;
 	zend_string *word;
-	PspellManager *manager;
+	AspellSpeller *manager;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "OS", &zmgr, php_pspell_ce, &word) == FAILURE) {
 		RETURN_THROWS();
@@ -482,11 +473,11 @@ PHP_FUNCTION(pspell_add_to_personal)
 		RETURN_FALSE;
 	}
 
-	pspell_manager_add_to_personal(manager, ZSTR_VAL(word));
-	if (pspell_manager_error_number(manager) == 0) {
+	aspell_speller_add_to_personal(manager, ZSTR_VAL(word), ZSTR_LEN(word));
+	if (aspell_speller_error_number(manager) == 0) {
 		RETURN_TRUE;
 	} else {
-		php_error_docref(NULL, E_WARNING, "pspell_add_to_personal() gave error: %s", pspell_manager_error_message(manager));
+		php_error_docref(NULL, E_WARNING, "pspell_add_to_personal() gave error: %s", aspell_speller_error_message(manager));
 		RETURN_FALSE;
 	}
 }
@@ -497,7 +488,7 @@ PHP_FUNCTION(pspell_add_to_session)
 {
 	zval *zmgr;
 	zend_string *word;
-	PspellManager *manager;
+	AspellSpeller *manager;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "OS", &zmgr, php_pspell_ce, &word) == FAILURE) {
 		RETURN_THROWS();
@@ -509,11 +500,11 @@ PHP_FUNCTION(pspell_add_to_session)
 		RETURN_FALSE;
 	}
 
-	pspell_manager_add_to_session(manager, ZSTR_VAL(word));
-	if (pspell_manager_error_number(manager) == 0) {
+	aspell_speller_add_to_session(manager, ZSTR_VAL(word), ZSTR_LEN(word));
+	if (aspell_speller_error_number(manager) == 0) {
 		RETURN_TRUE;
 	} else {
-		php_error_docref(NULL, E_WARNING, "pspell_add_to_session() gave error: %s", pspell_manager_error_message(manager));
+		php_error_docref(NULL, E_WARNING, "pspell_add_to_session() gave error: %s", aspell_speller_error_message(manager));
 		RETURN_FALSE;
 	}
 }
@@ -523,18 +514,18 @@ PHP_FUNCTION(pspell_add_to_session)
 PHP_FUNCTION(pspell_clear_session)
 {
 	zval *zmgr;
-	PspellManager *manager;
+	AspellSpeller *manager;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "O", &zmgr, php_pspell_ce) == FAILURE) {
 		RETURN_THROWS();
 	}
 	manager = php_pspell_object_from_zend_object(Z_OBJ_P(zmgr))->mgr;
 
-	pspell_manager_clear_session(manager);
-	if (pspell_manager_error_number(manager) == 0) {
+	aspell_speller_clear_session(manager);
+	if (aspell_speller_error_number(manager) == 0) {
 		RETURN_TRUE;
 	} else {
-		php_error_docref(NULL, E_WARNING, "pspell_clear_session() gave error: %s", pspell_manager_error_message(manager));
+		php_error_docref(NULL, E_WARNING, "pspell_clear_session() gave error: %s", aspell_speller_error_message(manager));
 		RETURN_FALSE;
 	}
 }
@@ -544,19 +535,19 @@ PHP_FUNCTION(pspell_clear_session)
 PHP_FUNCTION(pspell_save_wordlist)
 {
 	zval *zmgr;
-	PspellManager *manager;
+	AspellSpeller *manager;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "O", &zmgr, php_pspell_ce) == FAILURE) {
 		RETURN_THROWS();
 	}
 	manager = php_pspell_object_from_zend_object(Z_OBJ_P(zmgr))->mgr;
 
-	pspell_manager_save_all_word_lists(manager);
+	aspell_speller_save_all_word_lists(manager);
 
-	if (pspell_manager_error_number(manager) == 0) {
+	if (aspell_speller_error_number(manager) == 0) {
 		RETURN_TRUE;
 	} else {
-		php_error_docref(NULL, E_WARNING, "pspell_save_wordlist() gave error: %s", pspell_manager_error_message(manager));
+		php_error_docref(NULL, E_WARNING, "pspell_save_wordlist() gave error: %s", aspell_speller_error_message(manager));
 		RETURN_FALSE;
 	}
 
@@ -568,7 +559,7 @@ PHP_FUNCTION(pspell_config_create)
 {
 	char *language, *spelling = NULL, *jargon = NULL, *encoding = NULL;
 	size_t language_len, spelling_len = 0, jargon_len = 0, encoding_len = 0;
-	PspellConfig *config;
+	AspellConfig *config;
 
 #ifdef PHP_WIN32
 	TCHAR aspell_dir[200];
@@ -583,7 +574,7 @@ PHP_FUNCTION(pspell_config_create)
 		RETURN_THROWS();
 	}
 
-	config = new_pspell_config();
+	config = new_aspell_config();
 
 #ifdef PHP_WIN32
     /* If aspell was installed using installer, we should have a key
@@ -600,29 +591,29 @@ PHP_FUNCTION(pspell_config_create)
 			strlcpy(dict_dir, aspell_dir, sizeof(dict_dir));
 			strlcat(dict_dir, "\\dict", sizeof(dict_dir));
 
-			pspell_config_replace(config, "data-dir", data_dir);
-			pspell_config_replace(config, "dict-dir", dict_dir);
+			aspell_config_replace(config, "data-dir", data_dir);
+			aspell_config_replace(config, "dict-dir", dict_dir);
 		}
 	}
 #endif
 
-	pspell_config_replace(config, "language-tag", language);
+	aspell_config_replace(config, "language-tag", language);
 
 	if (spelling_len) {
-		pspell_config_replace(config, "spelling", spelling);
+		aspell_config_replace(config, "spelling", spelling);
 	}
 
 	if (jargon_len) {
-		pspell_config_replace(config, "jargon", jargon);
+		aspell_config_replace(config, "jargon", jargon);
 	}
 
 	if (encoding_len) {
-		pspell_config_replace(config, "encoding", encoding);
+		aspell_config_replace(config, "encoding", encoding);
 	}
 
 	/* By default I do not want to write anything anywhere because it'll try to write to $HOME
 	which is not what we want */
-	pspell_config_replace(config, "save-repl", "false");
+	aspell_config_replace(config, "save-repl", "false");
 
 	object_init_ex(return_value, php_pspell_config_ce);
 	php_pspell_config_object_from_zend_object(Z_OBJ_P(return_value))->cfg = config;
@@ -634,14 +625,14 @@ PHP_FUNCTION(pspell_config_runtogether)
 {
 	zval *zcfg;
 	bool runtogether;
-	PspellConfig *config;
+	AspellConfig *config;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "Ob", &zcfg, php_pspell_config_ce, &runtogether) == FAILURE) {
 		RETURN_THROWS();
 	}
 	config = php_pspell_config_object_from_zend_object(Z_OBJ_P(zcfg))->cfg;
 
-	pspell_config_replace(config, "run-together", runtogether ? "true" : "false");
+	aspell_config_replace(config, "run-together", runtogether ? "true" : "false");
 
 	RETURN_TRUE;
 }
@@ -652,7 +643,7 @@ PHP_FUNCTION(pspell_config_mode)
 {
 	zval *zcfg;
 	zend_long mode;
-	PspellConfig *config;
+	AspellConfig *config;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "Ol", &zcfg, php_pspell_config_ce, &mode) == FAILURE) {
 		RETURN_THROWS();
@@ -661,11 +652,11 @@ PHP_FUNCTION(pspell_config_mode)
 
 	/* First check what mode we want (how many suggestions) */
 	if (mode == PSPELL_FAST) {
-		pspell_config_replace(config, "sug-mode", "fast");
+		aspell_config_replace(config, "sug-mode", "fast");
 	} else if (mode == PSPELL_NORMAL) {
-		pspell_config_replace(config, "sug-mode", "normal");
+		aspell_config_replace(config, "sug-mode", "normal");
 	} else if (mode == PSPELL_BAD_SPELLERS) {
-		pspell_config_replace(config, "sug-mode", "bad-spellers");
+		aspell_config_replace(config, "sug-mode", "bad-spellers");
 	}
 
 	RETURN_TRUE;
@@ -678,7 +669,7 @@ PHP_FUNCTION(pspell_config_ignore)
 	char ignore_str[MAX_LENGTH_OF_LONG + 1];
 	zval *zcfg;
 	zend_long ignore = 0L;
-	PspellConfig *config;
+	AspellConfig *config;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "Ol", &zcfg, php_pspell_config_ce, &ignore) == FAILURE) {
 		RETURN_THROWS();
@@ -687,7 +678,7 @@ PHP_FUNCTION(pspell_config_ignore)
 
 	snprintf(ignore_str, sizeof(ignore_str), ZEND_LONG_FMT, ignore);
 
-	pspell_config_replace(config, "ignore", ignore_str);
+	aspell_config_replace(config, "ignore", ignore_str);
 	RETURN_TRUE;
 }
 /* }}} */
@@ -696,7 +687,7 @@ static void pspell_config_path(INTERNAL_FUNCTION_PARAMETERS, char *option)
 {
 	zval *zcfg;
 	zend_string *value;
-	PspellConfig *config;
+	AspellConfig *config;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "OP", &zcfg, php_pspell_config_ce, &value) == FAILURE) {
 		RETURN_THROWS();
@@ -707,7 +698,7 @@ static void pspell_config_path(INTERNAL_FUNCTION_PARAMETERS, char *option)
 		RETURN_FALSE;
 	}
 
-	pspell_config_replace(config, option, ZSTR_VAL(value));
+	aspell_config_replace(config, option, ZSTR_VAL(value));
 
 	RETURN_TRUE;
 }
@@ -738,20 +729,20 @@ PHP_FUNCTION(pspell_config_repl)
 {
 	zval *zcfg;
 	zend_string *repl;
-	PspellConfig *config;
+	AspellConfig *config;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "OP", &zcfg, php_pspell_config_ce, &repl) == FAILURE) {
 		RETURN_THROWS();
 	}
 	config = php_pspell_config_object_from_zend_object(Z_OBJ_P(zcfg))->cfg;
 
-	pspell_config_replace(config, "save-repl", "true");
+	aspell_config_replace(config, "save-repl", "true");
 
 	if (php_check_open_basedir(ZSTR_VAL(repl))) {
 		RETURN_FALSE;
 	}
 
-	pspell_config_replace(config, "repl", ZSTR_VAL(repl));
+	aspell_config_replace(config, "repl", ZSTR_VAL(repl));
 
 	RETURN_TRUE;
 }
@@ -762,14 +753,14 @@ PHP_FUNCTION(pspell_config_save_repl)
 {
 	zval *zcfg;
 	bool save;
-	PspellConfig *config;
+	AspellConfig *config;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "Ob", &zcfg, php_pspell_config_ce, &save) == FAILURE) {
 		RETURN_THROWS();
 	}
 	config = php_pspell_config_object_from_zend_object(Z_OBJ_P(zcfg))->cfg;
 
-	pspell_config_replace(config, "save-repl", save ? "true" : "false");
+	aspell_config_replace(config, "save-repl", save ? "true" : "false");
 
 	RETURN_TRUE;
 }
